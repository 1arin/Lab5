import matplotlib.pyplot as plt

import matplotlib.pyplot as plt

# tof_filtered = []
# r_filtered = []
# l_filtered = []
# chas_xyz_filtered = [] 

raw_tof = [750, 727, 699, 667, 638, 612, 604, 548, 517, 499, 461, 443, 413, 399, 357, 331, 306, 270, 240, 110, 68, 119, 156, 160, 157, 143, 134, 135, 156, 180, 198, 214, 221, 219, 221, 215, 221, 230, 254, 274, 289, 294, 288, 280, 270, 269, 273, 279, 286, 289, 289, 283, 279, 273, 272, 273, 276, 283, 286, 286, 284, 278, 275, 275, 276, 281, 282, 285, 282, 282, 281, 276, 278, 281, 284, 285, 282, 278, 278, 279, 281, 284, 282, 279, 279, 278, 280, 281, 281, 281, 281, 278, 281, 282, 280, 279, 280, 279, 280, 282, 279, 280, 280, 280, 279, 279, 280, 283, 281, 282, 281, 281, 299, 339, 376, 403, 420, 445, 485, 531, 555, 578, 609, 641, 673, 695, 723, 733, 780, 809, 837, 866, 896, 926, 952, 980, 1009, 1036, 1053, 1095, 1122, 1150, 1174, 1204, 1236, 1261, 1292, 1318, 1346, 1376, 1406, 1432, 1462, 1492, 1509, 1538, 1578, 1598, 1625, 1651, 1683, 1717, 1754, 1773, 1799, 1831, 1851, 1894, 1924, 1944, 1979, 2001, 2031, 2058, 2084, 2120, 2131, 2174, 2193, 2226, 2240, 2272, 2291, 2281, 2282, 2297, 2291, 2290, 2296, 2298, 2290, 2296, 2298]

raw_rigth_wall = [11.42103058, 11.29534981, 11.67239212, 11.67239212, 11.42103058, 11.46292417, 11.46292417, 11.71428571, 11.71428571, 11.42103058, 11.29534981, 11.46292417, 11.21156263, 11.46292417, 11.46292417, 11.25345622, 11.25345622, 11.21156263, 11.21156263, 10.79262673, 10.96020109, 11.16966904, 10.83452032, 10.70883955, 10.4993716, 10.4993716, 10.24801005, 10.24801005, 9.745286971, 9.493925429, 9.452031839, 8.907415165, 9.033095936, 9.074989527, 8.572266443, 8.530372853, 8.530372853, 8.572266443, 8.488479263, 8.530372853, 8.530372853, 8.572266443, 8.530372853, 8.530372853, 8.530372853, 8.488479263, 8.530372853, 8.781734395, 8.572266443, 8.530372853, 8.530372853, 8.781734395, 8.823627985, 9.033095936, 9.703393381, 10.24801005, 10.75073314, 11.46292417, 12.38458316, 13.13866778, 13.64139087, 14.39547549, 15.35902807, 16.0712191, 17.07666527, 20.63453079, 23.93365103, 28.33247801, 29.43218475, 28.33247801, 27.0494868, 26.13, 25.03, 25.03, 24.12, 23.75, 22.83, 22.83, 22.83, 22.83, 24.12, 23.93, 25.03, 25.22, 26.13, 27.05, 28.33, 29.43, 30.53, 31.45, 32.55, 33.46, 31.45, 28.15, 26.13, 22.83, 21.73, 19.53, 17.08, 16.57, 15.82, 15.48, 15.36, 14.9, 14.6, 14.35, 14.1, 14.14, 14.14, 14.14, 14.14, 14.14, 14.14, 14.14, 14.14, 14.14, 14.1, 14.14, 14.14, 14.1, 14.14, 15.15, 14.65, 14.27, 14.6, 14.48, 14.6, 14.35, 14.6, 14.35, 14.35, 14.6, 14.4, 14.35, 14.35, 14.35, 14.27, 14.35, 13.98, 14.4, 14.35, 14.4, 14.4, 14.35, 14.35, 14.44, 14.1, 14.14, 13.89, 13.89, 13.64, 13.64, 13.64, 13.39, 13.31, 13.1, 13.14, 12.85, 12.43, 12.64, 12.43, 12.18, 11.76, 11.88, 11.71, 11.46, 11.92, 10.96, 10.58, 10.25, 10.04, 9.703393381, 9.242563888, 8.991202346, 8.572266443, 8.06954336, 7.860075408, 7.608713867, 7.147884374, 6.896522832, 6.393799749, 6.026582159, 6.017122316, 6.026582159, 6.026582159, 6.026582159, 6.017122316, 6.026582159, 5.99820263, 6.026582159, 6.026582159, 5.99820263, 6.026582159]

raw_left_wall =  [12.6359447, 12.6359447, 12.67783829, 12.6359447, 12.84541265, 12.92919983, 12.38458316, 12.38458316, 12.34268957, 12.13322162, 12.46837034, 12.38458316, 12.46837034, 12.42647675, 12.00754085, 12.38458316, 12.42647675, 12.38458316, 12.17511521, 12.09132803, 12.13322162, 12.17511521, 12.13322162, 12.6359447, 12.59405111, 12.88730624, 12.88730624, 12.88730624, 13.34813574, 13.39002933, 13.59949728, 13.47381651, 13.64139087, 13.89275241, 13.59949728, 13.85085882, 14.14411395, 14.10222036, 14.10222036, 13.97653959, 14.10222036, 13.80896523, 14.10222036, 13.97653959, 13.97653959, 14.06032677, 14.01843318, 14.10222036, 13.85085882, 14.10222036, 14.10222036, 14.10222036, 14.39547549, 14.52115626, 14.56304985, 15.14956012, 15.40092166, 15.90364474, 16.40636783, 16.86719732, 17.41181399, 21.00109971, 24.30021994, 26.49963343, 28.88233138, 32.18145161, 34.56414956, 36.39699413, 37.86326979, 40.06268328, 41.16239003, 43.36, 42.26, 45.74, 46.84, 45.74, 43.73, 51.43, 53.44, 52.53, 51.43, 51.43, 43.55, 38.78, 39.88, 37.5, 37.68, 36.58, 34.38, 32.18, 26.5, 26.87, 23.2, 19.9, 16.62, 15.65, 14.69, 14.1, 13.14, 11.88, 11.67, 10.96, 9.91, 9.41, 8.99, 8.45, 8.2, 7.99, 8.28, 8.2, 8.2, 8.2, 8.24, 8.2, 8.49, 8.49, 8.53, 8.45, 8.74, 8.7, 8.53, 8.49, 8.45, 8.24, 8.24, 8.49, 8.49, 8.28, 8.45, 8.7, 8.49, 8.45, 8.45, 8.74, 8.49, 8.49, 8.74, 8.7, 8.45, 8.74, 8.7, 8.74, 8.95, 10.16, 10.16, 10.46, 10.37, 10.42, 10.37, 10.58, 10.67, 10.67, 10.63, 10.67, 10.88, 10.92, 10.83, 10.92, 10.92, 10.92, 10.92, 10.63, 10.92, 11.13, 11.42, 11.42, 10.88, 11.13, 11.17, 11.42, 11.34, 11.37913699, 11.63049853, 11.88186008, 11.83996649, 12.2170088, 12.09132803, 12.13322162, 12.42647675, 12.17511521, 12.6359447, 12.6359447, 12.38458316, 12.6359447, 12.42647675, 12.6359447, 12.59405111, 12.59405111, 12.6359447, 12.55215752, 12.59405111, 12.6359447, 12.55215752]

raw_chas_x_y_z = [
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0),
    (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0), (0.16443, -0.06782, 0.0)
]

# ฟังก์ชันการกรองสัญญาณ
def filter_signal_tof(tof):
    sen = tof
    tof_filtered = []
    for i in range(len(tof)):
        filtered_tof = sen[1] + (0.6 * tof[i])
        tof_filtered.append(filtered_tof)
    return tof_filtered

def filter_signal_r(r):
    sen = r
    r_filtered = []
    for i in range(len(r)):
        filtered_r = sen[1] + (0.6 * r[i])
        r_filtered.append(filtered_r)
    return r_filtered

def filter_signal_l(l):
    sen = l
    l_filtered = []
    for i in range(len(l)):
        filtered_l = sen[1] + (0.6 * l[i])
        l_filtered.append(filtered_l)
    return l_filtered

def filter_signal_chas(raw_chas_x_y_z, sen):
    sen_values = [t[sen] for t in raw_chas_x_y_z]
    filtered_values = []
    for i in range(len(sen_values)):
        filtered_value = sen_values[i] + (0.6 * sen_values[i])
        filtered_values.append(filtered_value)
    return filtered_values

# ฟังก์ชันการแสดงกราฟ
def plot_graphs():
    fig, axs = plt.subplots(2, 2, figsize=(14, 10))

    # กราฟที่ 1: Left Sharp
    axs[0, 0].plot(raw_left_wall, label='Raw Left Sharp', color='blue')
    axs[0, 0].plot(filter_signal_l(raw_left_wall), label='Filtered Left Sharp', color='red', linestyle='--')
    axs[0, 0].set_title('Left Sharp')
    axs[0, 0].set_ylabel('Distance (cm)')
    axs[0, 0].legend()
    axs[0, 0].grid(True)

    # กราฟที่ 2: Right Sharp
    axs[0, 1].plot(raw_rigth_wall, label='Raw Right Sharp', color='blue')
    axs[0, 1].plot(filter_signal_r(raw_rigth_wall), label='Filtered Right Sharp', color='green', linestyle='--')
    axs[0, 1].set_title('Right Sharp')
    axs[0, 1].set_ylabel('Distance (cm)')
    axs[0, 1].legend()
    axs[0, 1].grid(True)

    # กราฟที่ 3: TOF
    axs[1, 0].plot(raw_tof, label='Raw TOF', color='blue')
    axs[1, 0].plot(filter_signal_tof(raw_tof), label='Filtered TOF', color='red', linestyle='--')
    axs[1, 0].set_title('TOF')
    axs[1, 0].set_ylabel('Distance (mm)')
    axs[1, 0].legend()
    axs[1, 0].grid(True)

    # # กราฟที่ 4: Chassis
    # x_pos = [pos[0] for pos in raw_chas_x_y_z]
    # y_pos = [pos[1] for pos in raw_chas_x_y_z]
    # axs[1, 1].plot(x_pos, y_pos, 'y', label='Chassis Path')
    # axs[1, 1].set_title('Chassis Path')
    # axs[1, 1].set_xlabel('X Position')
    # axs[1, 1].set_ylabel('Y Position')
    # axs[1, 1].legend()
    # axs[1, 1].grid(True)

    plt.tight_layout()
    plt.show()

# เรียกใช้ฟังก์ชันการแสดงกราฟ
plot_graphs()
